package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"user-service/graph/generated"
	gqlmodel "user-service/graph/model"
	"user-service/internal/auth"
	dbmodel "user-service/internal/model"
	"golang.org/x/crypto/bcrypt"
)

func (r *mutationResolver) CreateUser(ctx context.Context, input gqlmodel.CreateUserInput) (*dbmodel.User, error) {
	if input.Role != "manager" && input.Role != "member" {
		return nil, errors.New("invalid role: must be 'manager' or 'member'")
	}

	// Check duplicate email
	var existing dbmodel.User
	if err := r.DB.Where("email = ?", input.Email).First(&existing).Error; err == nil {
		return nil, errors.New("email already in use")
	}

	hash, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		return nil, errors.New("failed to hash password")
	}

	user := &dbmodel.User{
		Username:     input.Username,
		Email:        input.Email,
		Role:         input.Role,
		PasswordHash: string(hash),
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

func (r *mutationResolver) Login(ctx context.Context, input gqlmodel.LoginInput) (*gqlmodel.AuthPayload, error) {
	var user dbmodel.User
	if err := r.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		return nil, errors.New("invalid credentials")
	}

	err := bcrypt.CompareHashAndPassword([]byte(user.PasswordHash), []byte(input.Password))
	if err != nil {
		return nil, errors.New("invalid credentials")
	}

	token, err := auth.GenerateAccessToken(user.UserID)
	if err != nil {
		return nil, errors.New("failed to generate token")
	}

	return &gqlmodel.AuthPayload{
		Token: token,
		User:  &user,
	}, nil
}

func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// JWT is stateless â†’ client just deletes token (e.g. from localStorage or cookie)
	return true, nil
}

func (r *queryResolver) FetchUsers(ctx context.Context) ([]*dbmodel.User, error) {
	userID, ok := auth.GetUserIDFromContext(ctx)
	if !ok {
		return nil, errors.New("unauthenticated")
	}

	// Check role
	var user dbmodel.User
	if err := r.DB.First(&user, "user_id = ?", userID).Error; err != nil {
		return nil, errors.New("user not found")
	}

	if user.Role != "manager" {
		return nil, errors.New("forbidden: only managers can view user list")
	}

	var users []*dbmodel.User
	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
